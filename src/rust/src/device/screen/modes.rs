use crate::{
    device::io::{inb, outb},
    serial_println,
};
const VGA_AC_INDEX: u16 = 0x3C0;
const VGA_AC_WRITE: u16 = 0x3C0;
const VGA_AC_READ: u16 = 0x3C1;
const VGA_MISC_WRITE: u16 = 0x3C2;
pub const VGA_SEQ_INDEX: u16 = 0x3C4;
pub const VGA_SEQ_DATA: u16 = 0x3C5;
const VGA_MISC_READ: u16 = 0x3CC;
pub const VGA_GC_INDEX: u16 = 0x3CE;
pub const VGA_GC_DATA: u16 = 0x3CF;
/*			COLOR emulation		MONO emulation */
const VGA_CRTC_INDEX: u16 = 0x3D4; /* 0x3B4 */
const VGA_CRTC_DATA: u16 = 0x3D5; /* 0x3B5 */
const VGA_INSTAT_READ: u16 = 0x3DA;

const VGA_NUM_SEQ_REGS: usize = 5;
const VGA_NUM_CRTC_REGS: usize = 25;
const VGA_NUM_GC_REGS: usize = 9;
const VGA_NUM_AC_REGS: usize = 21;

pub struct VgaRegister {
    pub misc: u8,
    pub seq: [u8; 5],
    pub crtc: [u8; 25],
    pub gc: [u8; 9],
    pub attr: [u8; 21],
}

impl VgaRegister {
    pub fn write_registers(&self) {
        unsafe {
            /* write MISCELLANEOUS reg */
            outb(VGA_MISC_WRITE, self.misc);
            /* write SEQUENCER regs */
            for i in 0..VGA_NUM_SEQ_REGS {
                outb(VGA_SEQ_INDEX, i as u8);
                outb(VGA_SEQ_DATA, self.seq[i]);
            }
            /* unlock CRTC registers */
            outb(VGA_CRTC_INDEX, 0x03);
            outb(VGA_CRTC_DATA, inb(VGA_CRTC_DATA) | 0x80);
            outb(VGA_CRTC_INDEX, 0x11);
            outb(VGA_CRTC_DATA, inb(VGA_CRTC_DATA) & !0x80);
            /* write CRTC regs */
            for i in 0..VGA_NUM_CRTC_REGS {
                outb(VGA_CRTC_INDEX, i as u8);
                let mut val = self.crtc[i];
                /* make sure they remain unlocked */
                if i == 0x03 {
                    val |= 0x80;
                } else if i == 0x11 {
                    val &= !0x80;
                }
                outb(VGA_CRTC_DATA, val);
            }
            /* write GRAPHICS CONTROLLER regs */
            for i in 0..VGA_NUM_GC_REGS {
                outb(VGA_GC_INDEX, i as u8);
                outb(VGA_GC_DATA, self.gc[i]);
            }
            /* write ATTRIBUTE CONTROLLER regs */
            for i in 0..VGA_NUM_AC_REGS {
                let _ = inb(VGA_INSTAT_READ);
                outb(VGA_AC_INDEX, i as u8);
                outb(VGA_AC_WRITE, self.attr[i]);
            }
            /* lock 16-color palette and unblank display */
            let _ = inb(VGA_INSTAT_READ);
            outb(VGA_AC_INDEX, 0x20);
        }
    }

    pub fn read_registers() -> Self {
        let mut reg = [0u8; 61];
        unsafe {
            /* read MISCELLANEOUS reg */
            reg[0] = inb(VGA_MISC_READ);
            /* read SEQUENCER regs */
            for i in 0..VGA_NUM_SEQ_REGS {
                outb(VGA_SEQ_INDEX, i as u8);
                reg[i + 1] = inb(VGA_SEQ_DATA);
            }
            /* read CRTC regs */
            for i in 0..VGA_NUM_CRTC_REGS {
                outb(VGA_CRTC_INDEX, i as u8);
                reg[i + 1 + VGA_NUM_SEQ_REGS] = inb(VGA_CRTC_DATA);
            }
            /* read GRAPHICS CONTROLLER regs */
            for i in 0..VGA_NUM_GC_REGS {
                outb(VGA_GC_INDEX, i as u8);
                reg[i + 1 + VGA_NUM_SEQ_REGS + VGA_NUM_CRTC_REGS] = inb(VGA_GC_DATA);
            }
            /* read ATTRIBUTE CONTROLLER regs */
            for i in 0..VGA_NUM_AC_REGS {
                let _ = inb(VGA_INSTAT_READ);
                outb(VGA_AC_INDEX, i as u8);
                reg[i + 1 + VGA_NUM_SEQ_REGS + VGA_NUM_CRTC_REGS + VGA_NUM_GC_REGS] =
                    inb(VGA_AC_READ);
            }
            /* lock 16-color palette and unblank display */
            let _ = inb(VGA_INSTAT_READ);
            outb(VGA_AC_INDEX, 0x20);
        }
        reg.into()
    }

    pub fn verify_registers(&self, other: &VgaRegister) {
        if self.misc != other.misc {
            serial_println!("MISC: {} != {}", self.misc, other.misc);
        }
        for i in 0..VGA_NUM_SEQ_REGS {
            if self.seq[i] != other.seq[i] {
                serial_println!("SEQ[{}]: {} != {}", i, self.seq[i], other.seq[i]);
            }
        }
        for i in 0..VGA_NUM_CRTC_REGS {
            if self.crtc[i] != other.crtc[i] {
                serial_println!("CRTC[{}]: {} != {}", i, self.crtc[i], other.crtc[i]);
            }
        }
        for i in 0..VGA_NUM_GC_REGS {
            if self.gc[i] != other.gc[i] {
                serial_println!("GC[{}]: {} != {}", i, self.gc[i], other.gc[i]);
            }
        }
        for i in 0..VGA_NUM_AC_REGS {
            if self.attr[i] != other.attr[i] {
                serial_println!("AC[{}]: {} != {}", i, self.attr[i], other.attr[i]);
            }
        }
    }
}

impl From<[u8; 61]> for VgaRegister {
    fn from(arr: [u8; 61]) -> Self {
        let misc = arr[0];
        let mut seq = [0u8; 5];
        seq.copy_from_slice(&arr[1..=5]);
        let mut crtc = [0u8; 25];
        crtc.copy_from_slice(&arr[6..=30]);
        let mut gc = [0u8; 9];
        gc.copy_from_slice(&arr[31..=39]);
        let mut attr = [0u8; 21];
        attr.copy_from_slice(&arr[40..=60]);
        VgaRegister {
            misc,
            seq,
            crtc,
            gc,
            attr,
        }
    }
}

/*****************************************************************************
VGA REGISTER DUMPS FOR VARIOUS TEXT MODES
******************************************************************************
()=to do
    40x25	(40x30)	40x50	(40x60)
    (45x25)	(45x30)	(45x50)	(45x60)
    80x25	(80x30)	80x50	(80x60)
    (90x25)	90x30	(90x50)	90x60
*****************************************************************************/
pub const TEXT_40X25: VgaRegister = VgaRegister {
    misc: 0x67,
    seq: [0x03, 0x08, 0x03, 0x00, 0x02],
    crtc: [
        0x2D, 0x27, 0x28, 0x90, 0x2B, 0xA0, 0xBF, 0x1F, 0x00, 0x4F, 0x0D, 0x0E, 0x00, 0x00, 0x00,
        0xA0, 0x9C, 0x8E, 0x8F, 0x14, 0x1F, 0x96, 0xB9, 0xA3, 0xFF,
    ],
    gc: [0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0E, 0x00, 0xFF],
    attr: [
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E,
        0x3F, 0x0C, 0x00, 0x0F, 0x08, 0x00,
    ],
};

pub const TEXT_40X50: VgaRegister = VgaRegister {
    misc: 0x67,
    seq: [0x03, 0x08, 0x03, 0x00, 0x02],
    crtc: [
        0x2D, 0x27, 0x28, 0x90, 0x2B, 0xA0, 0xBF, 0x1F, 0x00, 0x47, 0x06, 0x07, 0x00, 0x00, 0x04,
        0x60, 0x9C, 0x8E, 0x8F, 0x14, 0x1F, 0x96, 0xB9, 0xA3, 0xFF,
    ],
    gc: [0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0E, 0x00, 0xFF],
    attr: [
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E,
        0x3F, 0x0C, 0x00, 0x0F, 0x08, 0x00,
    ],
};

pub const TEXT_80X25: VgaRegister = VgaRegister {
    misc: 0x67,
    seq: [0x03, 0x00, 0x03, 0x00, 0x02],
    crtc: [
        0x5F, 0x4F, 0x50, 0x82, 0x55, 0x81, 0xBF, 0x1F, 0x00, 0x4F, 0x0D, 0x0E, 0x00, 0x00, 0x00,
        0x50, 0x9C, 0x0E, 0x8F, 0x28, 0x1F, 0x96, 0xB9, 0xA3, 0xFF,
    ],
    gc: [0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0E, 0x00, 0xFF],
    attr: [
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E,
        0x3F, 0x0C, 0x00, 0x0F, 0x08, 0x00,
    ],
};

pub const TEXT_80X50: VgaRegister = VgaRegister {
    misc: 0x67,
    seq: [0x03, 0x00, 0x03, 0x00, 0x02],
    crtc: [
        0x5F, 0x4F, 0x50, 0x82, 0x55, 0x81, 0xBF, 0x1F, 0x00, 0x47, 0x06, 0x07, 0x00, 0x00, 0x01,
        0x40, 0x9C, 0x8E, 0x8F, 0x28, 0x1F, 0x96, 0xB9, 0xA3, 0xFF,
    ],
    gc: [0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0E, 0x00, 0xFF],
    attr: [
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E,
        0x3F, 0x0C, 0x00, 0x0F, 0x08, 0x00,
    ],
};

pub const TEXT_90X30: VgaRegister = VgaRegister {
    misc: 0xE7,
    seq: [0x03, 0x01, 0x03, 0x00, 0x02],
    crtc: [
        0x6B, 0x59, 0x5A, 0x82, 0x60, 0x8D, 0x0B, 0x3E, 0x00, 0x4F, 0x0D, 0x0E, 0x00, 0x00, 0x00,
        0x00, 0xEA, 0x0C, 0xDF, 0x2D, 0x10, 0xE8, 0x05, 0xA3, 0xFF,
    ],
    gc: [0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0E, 0x00, 0xFF],
    attr: [
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E,
        0x3F, 0x0C, 0x00, 0x0F, 0x08, 0x00,
    ],
};

pub const TEXT_90X60: VgaRegister = VgaRegister {
    misc: 0xE7,
    seq: [0x03, 0x01, 0x03, 0x00, 0x02],
    crtc: [
        0x6B, 0x59, 0x5A, 0x82, 0x60, 0x8D, 0x0B, 0x3E, 0x00, 0x47, 0x06, 0x07, 0x00, 0x00, 0x00,
        0x00, 0xEA, 0x0C, 0xDF, 0x2D, 0x08, 0xE8, 0x05, 0xA3, 0xFF,
    ],
    gc: [0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0E, 0x00, 0xFF],
    attr: [
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E,
        0x3F, 0x0C, 0x00, 0x0F, 0x08, 0x00,
    ],
};

/*****************************************************************************
VGA REGISTER DUMPS FOR VARIOUS GRAPHICS MODES
*****************************************************************************/
pub const GRAPHIC_640X480X2: VgaRegister = VgaRegister {
    misc: 0xE3,
    seq: [0x03, 0x01, 0x0F, 0x00, 0x06],
    crtc: [
        0x5F, 0x4F, 0x50, 0x82, 0x54, 0x80, 0x0B, 0x3E, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0xEA, 0x0C, 0xDF, 0x28, 0x00, 0xE7, 0x04, 0xE3, 0xFF,
    ],
    gc: [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0F, 0xFF],
    attr: [
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E,
        0x3F, 0x01, 0x00, 0x0F, 0x00, 0x00,
    ],
};

/*****************************************************************************
*** NOTE: the mode described by g_320x200x4[]
is different from BIOS mode 05h in two ways:
- Framebuffer is at A000:0000 instead of B800:0000
- Framebuffer is linear (no screwy line-by-line CGA addressing)
*****************************************************************************/
pub const GRAPHIC_320X200X4: VgaRegister = VgaRegister {
    misc: 0x63,
    seq: [0x03, 0x09, 0x03, 0x00, 0x02],
    crtc: [
        0x2D, 0x27, 0x28, 0x90, 0x2B, 0x80, 0xBF, 0x1F, 0x00, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x9C, 0x0E, 0x8F, 0x14, 0x00, 0x96, 0xB9, 0xA3, 0xFF,
    ],
    gc: [0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x02, 0x00, 0xFF],
    attr: [
        0x00, 0x13, 0x15, 0x17, 0x02, 0x04, 0x06, 0x07, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16,
        0x17, 0x01, 0x00, 0x03, 0x00, 0x00,
    ],
};

pub const GRAPHIC_640X480X16: VgaRegister = VgaRegister {
    misc: 0xE3,
    seq: [0x03, 0x01, 0x08, 0x00, 0x06],
    crtc: [
        0x5F, 0x4F, 0x50, 0x82, 0x54, 0x80, 0x0B, 0x3E, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0xEA, 0x0C, 0xDF, 0x28, 0x00, 0xE7, 0x04, 0xE3, 0xFF,
    ],
    gc: [0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x05, 0x0F, 0xFF],
    attr: [
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E,
        0x3F, 0x01, 0x00, 0x0F, 0x00, 0x00,
    ],
};

pub const GRAPHIC_720X480X16: VgaRegister = VgaRegister {
    misc: 0xE7,
    seq: [0x03, 0x01, 0x08, 0x00, 0x06],
    crtc: [
        0x6B, 0x59, 0x5A, 0x82, 0x60, 0x8D, 0x0B, 0x3E, 0x00, 0x40, 0x06, 0x07, 0x00, 0x00, 0x00,
        0x00, 0xEA, 0x0C, 0xDF, 0x2D, 0x08, 0xE8, 0x05, 0xE3, 0xFF,
    ],
    gc: [0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x05, 0x0F, 0xFF],
    attr: [
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E,
        0x0F, 0x01, 0x00, 0x0F, 0x00, 0x00,
    ],
};

pub const GRAPHIC_320X200X256: VgaRegister = VgaRegister {
    misc: 0x63,
    seq: [0x03, 0x01, 0x0F, 0x00, 0x0E],
    crtc: [
        0x5F, 0x4F, 0x50, 0x82, 0x54, 0x80, 0xBF, 0x1F, 0x00, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x9C, 0x0E, 0x8F, 0x28, 0x40, 0x96, 0xB9, 0xA3, 0xFF,
    ],
    gc: [0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x05, 0x0F, 0xFF],
    attr: [
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E,
        0x0F, 0x41, 0x00, 0x0F, 0x00, 0x00,
    ],
};

pub const GRAPHIC_320X200X256_MODEX: VgaRegister = VgaRegister {
    misc: 0x63,
    seq: [0x03, 0x01, 0x0F, 0x00, 0x06],
    crtc: [
        0x5F, 0x4F, 0x50, 0x82, 0x54, 0x80, 0xBF, 0x1F, 0x00, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x9C, 0x0E, 0x8F, 0x28, 0x00, 0x96, 0xB9, 0xE3, 0xFF,
    ],
    gc: [0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x05, 0x0F, 0xFF],
    attr: [
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E,
        0x0F, 0x41, 0x00, 0x0F, 0x00, 0x00,
    ],
};
